apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        //ARouter配置
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    //开启DataBinding
    dataBinding {
        enabled true
    }
}

dependencies {

    /*hilt和arouter*/
    implementation rootProject.ext.dependencies["hilt-android"]
    kapt rootProject.ext.dependencies["hilt-compiler"]
    implementation rootProject.ext.dependencies["arouter-api"]
    kapt rootProject.ext.dependencies["arouter-compiler"]

    //宿主依赖业务组件
    if (!isBuildModule.toBoolean()) {
        implementation project(path: ':module_login')   //登录注册模块
        implementation project(path: ':module_home')    //主页模块
        //若将以下四个fragment模块的依赖放入在module_home下依赖，会出现报错(待排查具体原因)：
        // java.lang.ClassCastException: cn.jackmvvm.DaggerAppApplication_HiltComponents_SingletonC$FragmentCImpl cannot be cast to cn.jack.module_fragment_01.mvvm.view.fragment.ModuleFragment01_GeneratedInjector
        implementation project(path: ':module_fragment_01')
        implementation project(path: ':module_fragment_02')
        implementation project(path: ':module_fragment_03')
        implementation project(path: ':module_fragment_04')
    }else {
        implementation project(':lib_base')
    }

}
