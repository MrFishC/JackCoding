//lib的通用gradle配置

//plugins {
//    id 'com.android.library'
//}             //若保持，则会报错  org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:  替换成 apply plugin: 'com.android.library'

apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]

    //不注释该位置代码会报错，原因暂时不明。报错信息如下：
    //Caused by: java.lang.IllegalArgumentException: Parameter specified as non-null is null: method com.android.build.gradle.BaseExtension.buildToolsVersion, parameter version
//    buildToolsVersion rootProject.ext.android["buildToolsVersion"]    标记1
    //buildToolsVersion "29.0.2"        但是，若使用 该行代码代替 标记1 位置的代码，则不会报错   若有知道的，请告知，谢谢。

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        //这里采用的是Java风格的配置 若kotlin lib使用则需要单独配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation rootProject.ext.dependencies["appcompat"]

    //ARouter配置2
    implementation rootProject.ext.dependencies["arouter-api"]
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]

}
